// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js" 
}

enum UserRole {
  ADMIN 
  USER
}

model User {
  id String @id @default(cuid())
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  password String?
  role UserRole @default(USER)
  accounts Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  balance        Balance?
  balanceId      String? @unique // Ensure this is unique to establish a one-to-one relation
  transactions Transaction[]
}

model Balance {
  id String @id @default(cuid())
  userId String @unique // Add the @unique attribute here as well
  total Float @default(0.0) 
  USDT Float @default(0.0)
  BTC Float @default(0.0)
  ETH Float @default(0.0) 
  user User @relation(fields: [userId], references: [id])
}

model Account {
  id String @id @default(cuid())
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.Text
  access_token String? @db.Text
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.Text
  session_state String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) 
}

model VerificationToken {
  id String @id @default(cuid())  
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime
  
  @@unique([email, token])  
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])  
}

model Transaction {
  id             Int      @id @default(autoincrement())
  date           DateTime
  type           String
  cryptocurrency String
  amount         Float
  status         String
  userId         String
  user           User     @relation(fields: [userId], references: [id])
}