generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                         String                  @id @default(cuid())
  name                       String?
  email                      String?                 @unique
  emailVerified              DateTime?
  image                      String?
  password                   String?
  role                       UserRole                @default(USER)
  isTwoFactorEnabled         Boolean                 @default(false)
  username                   String?                 @unique
  accounts                   Account[]
  accountDetails             AccountDetails?
  cardData                   CardData?
  dashboardData              DashboardData?
  flights                    Flight[]
  twoFactorConfirmation      TwoFactorConfirmation?
  bankAccount                UserBankAccount?
  wireTransfers              WireTransfer[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BankAccount {
  id            String @id @default(cuid())
  bankName      String
  accountName   String
  accountNumber String
  status        String @default("active")
}

model UserBankAccount {
  id                String @id @default(cuid())
  userId            String @unique
  bankName          String
  accountNumber     String
  routingNumber     String
  iban              String?
  swiftCode         String?
  accountHolderName String
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DashboardData {
  id               String   @id @default(cuid())
  userId           String   @unique
  totalBalance     Float
  loanBalance      Float
  wireTransfer     Float
  domesticTransfer Float
  lastUpdated      DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CardData {
  id         String @id @default(cuid())
  userId     String @unique
  cardNumber String
  cardHolder String
  expiryDate String
  cvv        String
  cardLimit  Float
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AccountDetails {
  id                   String   @id @default(cuid())
  userId               String   @unique
  accountNumber        String
  currency             String
  accountType          String
  accountLimit         Float    @default(0)
  status              String    @default("active")
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WireTransfer {
  id                String   @id @default(cuid())
  userId            String
  beneficiaryName   String
  beneficiaryBank   String
  accountNumber     String
  swiftCode         String
  amount            Float
  status            String   @default("pending")
  reference         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum UserRole {
  ADMIN
  USER
}

enum PaymentMethodType {
  BANK_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
}

model PaymentMethod {
  id            String            @id @default(cuid())
  name          String
  type          PaymentMethodType
  instructions  String?
  walletAddress String?
  accountInfo   String?
  isActive      Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  bookings      FlightBooking[]
}

model Flight {
  id                    String          @id @default(cuid())
  flightNumber          String          @unique
  airline              String
  fromCity             String
  toCity               String
  departureDate        DateTime
  returnDate           DateTime?
  price                Float
  userId               String
  status               String          @default("scheduled")
  availableSeats       Int             @default(100)
  departureTerminal    String?
  arrivalTerminal      String?
  departureGate        String?
  arrivalGate          String?
  baggageClaim         String?
  aircraftModel        String?
  aircraftType         String?
  actualDepartureTime  DateTime?
  estimatedArrivalTime DateTime?
  scheduledDepartureTime DateTime?
  scheduledArrivalTime DateTime?
  user                 User            @relation(fields: [userId], references: [id])
  bookings            FlightBooking[]

  @@index([userId])
}

model FlightBooking {
  id                 String        @id @default(cuid())
  ticketNumber       String        @unique @default(dbgenerated("('TKT'::text || lpad((floor((random() * (100000)::double precision)))::text, 6, '0'::text))"))
  flightId           String
  status             String        @default("pending")
  passengerName      String?
  email              String?
  amount             Float
  paymentMethodId    String
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  flight             Flight        @relation(fields: [flightId], references: [id])
  paymentMethod      PaymentMethod @relation(fields: [paymentMethodId], references: [id])

  @@index([flightId])
  @@index([paymentMethodId])
}
